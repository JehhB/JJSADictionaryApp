/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import dictionarymodel.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.AbstractListModel;
import view.util.Pair;

/**
 *
 * @author eco
 */
public class SearchPanel extends javax.swing.JPanel {

	private static AbstractListModel<Pair<DictionaryEntry, DictionarySingleEntry>> EMPTY_MODEL = new AbstractListModel<>() {
		@Override
		public int getSize() {
			return 0;
		}

		@Override
		public Pair<DictionaryEntry, DictionarySingleEntry> getElementAt(int i) {
			return null;
		}
	};

	/**
	 * Creates new form SearchPanel
	 */
	public SearchPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                searchLabel = new javax.swing.JLabel();
                resultList = new javax.swing.JList<>();

                setMaximumSize(new java.awt.Dimension(640, 32767));
                setMinimumSize(new java.awt.Dimension(640, 0));

                searchLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
                searchLabel.setForeground(new java.awt.Color(65, 114, 159));
                searchLabel.setText("Results for \"Lorem\"");

                resultList.setCellRenderer(new GlossPanel());

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(searchLabel)
                                        .addComponent(resultList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, 0))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(searchLabel)
                                .addGap(24, 24, 24)
                                .addComponent(resultList)
                                .addGap(0, 0, 0))
                );
        }// </editor-fold>//GEN-END:initComponents

	public void clear() {
		resultList.setModel(EMPTY_MODEL);
	}

	public void setData(String query, List<DictionaryEntry> results) {
		if (results == null) {
			return;
		}

		if (results.isEmpty()) {
			searchLabel.setText(String.format("No results found for \"%s\"", query));
			resultList.setModel(EMPTY_MODEL);
			return;
		}

		var resultsList = results
			.stream()
			.map((entry) -> entry.entries
				.values()
				.stream()
				.map(single -> new Pair<>(entry, single)))
			.reduce(Stream::concat)
			.get()
			.collect(Collectors.toList());

		searchLabel.setText(String.format("Results for \"%s\"", query));
		resultList.setModel(new AbstractListModel<>() {
			@Override
			public int getSize() {
				return resultsList.size();
			}

			@Override
			public Pair<DictionaryEntry, DictionarySingleEntry> getElementAt(int i) {
				return resultsList.get(i);
			}

		});
	}

	public void addGotoDefintionListener(Consumer<DictionaryEntry> listener) {
		resultList.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ev) {
				var index = resultList.locationToIndex(ev.getPoint());
				var entry = resultList.getModel().getElementAt(index).fst;
				listener.accept(entry);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JList<Pair<DictionaryEntry,DictionarySingleEntry>> resultList;
        private javax.swing.JLabel searchLabel;
        // End of variables declaration//GEN-END:variables
}
